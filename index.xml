<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tx0actical&#39;s Blog</title>
    <link>https://Tx0actical.github.io/</link>
    <description>Recent content on Tx0actical&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2023 Tx0actical</copyright>
    <lastBuildDate>Sun, 26 Feb 2023 18:48:34 +0530</lastBuildDate><atom:link href="https://Tx0actical.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0x01 Introduction and Fundamentals</title>
      <link>https://Tx0actical.github.io/posts/win-drivers/win-drivers-p1/</link>
      <pubDate>Sun, 26 Feb 2023 18:48:34 +0530</pubDate>
      
      <guid>https://Tx0actical.github.io/posts/win-drivers/win-drivers-p1/</guid>
      <description>Hello.
This is the first part in the series, &amp;ldquo;Writing Windows Kernel-Mode Drivers for Fun and Profit&amp;rdquo;.
This series will help you understand and write KMDF drivers, and maybe exploit them in red team engagements or DoS your own/or others&amp;rsquo; system/VM if you messed up.
A basic DriverEntry routine definition looks something like this -&amp;gt;
NTSTATUS DriverEntry (_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) { UNREFERENCED_PARAMETER (DriverObject); UNREFERNECED_PARAMETER (RegistryPath); return STATUS_SUCCESS; } While this may look intimidating at first, brushing up OS Concepts, Windows Internals, C/C++ knowledge, and some persistence will help you better understand stuff that&amp;rsquo;s about to come.</description>
      <content>&lt;p&gt;Hello.&lt;/p&gt;
&lt;p&gt;This is the first part in the series, &amp;ldquo;Writing Windows Kernel-Mode Drivers for Fun and Profit&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This series will help you understand and write KMDF drivers, and maybe exploit them in red team engagements or DoS your own/or others&amp;rsquo; system/VM if you messed up.&lt;/p&gt;
&lt;p&gt;A basic &lt;code&gt;DriverEntry&lt;/code&gt; routine definition looks something like this -&amp;gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NTSTATUS &lt;span style=&#34;color:#a6e22e&#34;&gt;DriverEntry&lt;/span&gt; (_In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNREFERENCED_PARAMETER (DriverObject);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNREFERNECED_PARAMETER (RegistryPath);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; STATUS_SUCCESS;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While this may look intimidating at first, brushing up OS Concepts, Windows Internals, C/C++ knowledge, and some persistence will help you better understand stuff that&amp;rsquo;s about to come.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll be dealing mostly with Kernel-Mode or KMDF drivers (explained later), so unless explicitly stated, a driver means a KMDF driver.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For further details I recommend &lt;a href=&#34;https://www.microsoftpressstore.com/store/windows-internals-part-1-system-architecture-processes-9780735684188&#34;&gt;Windows Internals&lt;/a&gt; by Pavel Yosifovich, Alex Ionescu, Mark E. Russinovich, David A. Solomon and &lt;a href=&#34;https://leanpub.com/windowskernelprogrammingsecondedition&#34;&gt;Windows Kernel Programming&lt;/a&gt; by Pavel Yosifovich&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the way, &lt;code&gt;DriverEntry&lt;/code&gt; is just the &lt;code&gt;main&lt;/code&gt; of the driver.&lt;/p&gt;
&lt;h3 id=&#34;drivers-who-dis&#34;&gt;Drivers&amp;hellip; Who dis?&lt;/h3&gt;
&lt;p&gt;Drivers are Structured, High Privilege Deployable Kernel modules operating in Ring 0 processor privilege level (only kernel-mode drivers), same as kernel. Initially, Ring 1 and Ring 2 were reserved for drivers but nobody uses them anymore.&lt;/p&gt;
&lt;p&gt;Drivers provide a way to interact with (in most cases) hardware devices. These are called Hardware Drivers. On the contrary, software components that execute kernel-level privilege tasks such as file creation, are classified under Software Drivers.&lt;/p&gt;
&lt;p&gt;To write drivers, you need to follow a set of guidelines, conventions, and structures, all these together combine to form a Driver Framework. Two of these exist -&amp;gt; Windows Driver Model (WDM) and Windows Driver Frameworks (WDF).&lt;/p&gt;
&lt;h3 id=&#34;wdm-vs-wdf&#34;&gt;WDM vs WDF&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simply put, WDM is older, more-complex-to-work-with framework to write drivers. Ideal for writing File Systems or File System Filter drivers, WDM provides greater control over kernel objects and is hard to write, debug, and maintain.&lt;/p&gt;
&lt;p&gt;WDM objects are system-wide objects accessible to drivers and are referenced by pointers. A driver that corrupts a WDM object corrupts the entire system. WDM drivers are trusted kernel components, hence OS does less checks to validate data.&lt;/p&gt;
&lt;p&gt;From a security perspective, leveraging a framework that provides higher control than WDF, would enable more stealth during offensive engagements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WDF is a new, easier-to-work-with framework that abstracts a lot details of WDM. It supports a coherent object model in which objects are invisible to drivers.&lt;/p&gt;
&lt;p&gt;Corrupting a WDF Driver is not only more difficult - as the framework evalutates data being supplied - but also causes system wide problems less often.&lt;/p&gt;
&lt;p&gt;Apart from these, there many more subtle differences such as how both handle I/O requests. For eg. In a WDM driver, I/O dispatch routines map to particular IRP codes where in a WDF driver, the framework registers its own dispatch routines, follows some identical steps to WDM and then invoke driver&amp;rsquo;s event callback functions.&lt;/p&gt;
&lt;p&gt;Event callback functions do a more specific task than general I/O dispatch routines of WDM.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regardless of details, the bottom-line is, WDM is complex and much harder to work with while WDF is easier to understand, tradeoff being the abstraction.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;There are some tools and methodologies that are recommended while working with drivers.&lt;/p&gt;
&lt;p&gt;To build and deploy drivers you require Windows Software Development Kit (SDK), Windows Driver Kit (WDK) and Visual Studio 2022 (latest as of this writing). You can find them &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk&#34;&gt;here&lt;/a&gt; and Visual Studio &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make sure SDK and WDK versions match, this is important.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Additionally, you&amp;rsquo;d require a Visual Studio extension, &amp;ldquo;Windows Driver Kit&amp;rdquo;. That should be automatically installed if WDK is configured correctly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To test drivers, you&amp;rsquo;ll need a &lt;a href=&#34;https://www.microsoft.com/software-download/windows11&#34;&gt;Windows&lt;/a&gt; Virtual Machine, with Windows SDK and WDK installed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite&#34;&gt;SysInternals Tools&lt;/a&gt; are a must.&lt;/p&gt;
&lt;h3 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Driver Development is not something you do regularly, unless you have to.&lt;/p&gt;
&lt;p&gt;The purpose is to understand Windows internals and drivers in order to build anything from Anti-Virus Filter Driver to Rootkits. Knowing Driver Development also develops Kernel Debugging skills which are great if you are interested in Windows vulnerability research.&lt;/p&gt;
&lt;p&gt;In Part 2, you&amp;rsquo;ll learn Advanced Windows Internals concepts required to get started with drivers.&lt;/p&gt;
&lt;p&gt;Stay Tuned.&lt;/p&gt;
&lt;p&gt;Tx0actical. Out.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>System Idle Process(0)</title>
      <link>https://Tx0actical.github.io/posts/welcome/</link>
      <pubDate>Sun, 26 Feb 2023 13:53:19 +0530</pubDate>
      
      <guid>https://Tx0actical.github.io/posts/welcome/</guid>
      <description>Welcome.
In the coming weeks, I&amp;rsquo;ll be publishing a series of blogposts, titled &amp;ldquo;Writing Windows Kernel-Mode Drivers for Fun and Profit&amp;rdquo;.
Stay Tuned.
Tx0actical. Out.</description>
      <content>&lt;p&gt;Welcome.&lt;/p&gt;
&lt;p&gt;In the coming weeks, I&amp;rsquo;ll be publishing a series of blogposts, titled &amp;ldquo;Writing Windows Kernel-Mode Drivers for Fun and Profit&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Stay Tuned.&lt;/p&gt;
&lt;p&gt;Tx0actical. Out.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
